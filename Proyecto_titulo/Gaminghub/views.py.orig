from django.shortcuts import render, redirect
from django.http import HttpResponse
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User
from .models import RolUsuario,PerfilUsuario,Publicacion
from django.contrib import messages
import datetime
from PIL import Image
from django.conf import settings
import os
##Import models cuando esten listos##

from django.contrib.auth import login, logout, authenticate
from django.db import IntegrityError
from .forms import CustomUserCreationForm
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.decorators import login_required, user_passes_test




# Create your views here.


def loginView(request):
    if request.method == 'GET':
        return render(request, 'loginView.html')
    else:
        username = request.POST['username']
        password = request.POST['password']
        
        # Check if user is banned before authenticating
        try:
            user = User.objects.get(username=username)
            if user.is_active == False:
                error = 'El usuario que ingreso se encuentra baneado'
                return render(request, 'loginView.html', {'error': error})
        except User.DoesNotExist:
            user = None
        
        user = authenticate(request, username=username, password=password)
        if user is not None and user.is_superuser:
            login(request, user)
            return redirect('admin1')
        elif user is not None:
            login(request, user)
            return redirect('index')
        else:
            error = 'Usuario y/o contraseña incorrecto'
            return render(request, 'loginView.html', {'error': error})



@login_required
def perfil(request):
    if request.user.is_authenticated:
        username_id = request.user.id
    else:
        username_id = None

    user = User.objects.get(id=username_id)
    try:
        perfil = PerfilUsuario.objects.get(id_usuario = username_id)
    except PerfilUsuario.DoesNotExist:
        perfil = None  # O utiliza un valor por defecto si lo deseas

    context = {
        'username': user,
        'perfil': perfil
    }
    return render(request, 'perfil.html',context)


def admin1(request):

    user = User.objects.all().filter(is_staff = 0)
    
    context = {
        'username': user,
    }

    return render(request, 'admin1.html',context)

@login_required
def chat(request):
    return render(request, 'chat.html')

@login_required
def menu_principal(request):
    return render(request, 'menu_principal.html')


def index(request):
    if request.user.is_authenticated:
        username_id = request.user.id
    else:
        username_id = None

    user = User.objects.get(id=username_id)
    listadopublicaciones = Publicacion.objects.all().order_by('fecha_creacion')

def register(request):
        
    return render(request, 'register.html')

@login_required
def form_publicacion(request):
    if request.user.is_authenticated:
        username_id = request.user.id
    else:
        username_id = None

    user = User.objects.get(id=username_id)
    try:
        perfil = PerfilUsuario.objects.get(id_usuario = username_id)
    except PerfilUsuario.DoesNotExist:
        perfil = None  # O utiliza un valor por defecto si lo deseas

    context = {
        'username': user,
        'perfil':perfil
    }

    return render(request, 'form_publicacion.html', context)


@login_required
def completar_perfil(request):
    if request.user.is_authenticated:
        username_id = request.user.id
    else:
        username_id = None

    user = User.objects.get(id=username_id)

    context = {
        'username': user
    }


   
    return render(request, 'completar_perfil.html', context)

@login_required
def modificar_perfil(request):
    if request.user.is_authenticated:
        username_id = request.user.id
    else:
        username_id = None

    

    user = User.objects.get(id=username_id)

    try:
        perfil = PerfilUsuario.objects.get(id_usuario = username_id)
    except PerfilUsuario.DoesNotExist:
        perfil = None  # O utiliza un valor por defecto si lo deseas

    context = {
        'username': user,
        'perfil': perfil
    }


   
    return render(request, 'modificar_perfil.html', context)


# REGISTRARSE
@user_passes_test(lambda u: not u.is_authenticated, login_url='index')
def signup(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():


            # Obtener el nombre de usuario del formulario
            username = form.cleaned_data.get('username')

            # Comprobar si ya existe un usuario con ese nombre
            if User.objects.filter(username=username).exists():
                # Mostrar un mensaje de error
                form.add_error('username', 'Ya existe un usuario con ese nombre.')
                return render(request, 'signup.html', {'form': form})

            # Obtener los valores de las contraseñas
            password1 = form.cleaned_data.get('password1')
            password2 = form.cleaned_data.get('password2')


            # Comprobar si las contraseñas coinciden
            if password1 != password2:
                # Mostrar un mensaje de error
                form.add_error('password2', 'Las contraseñas no coinciden.')
                return render(request, 'signup.html', {'form': form})

            # Crear un objeto usuario con los datos del formulario
            user = form.save(commit=False)
            
            # Obtener los campos adicionales del formulario
            first_name = form.cleaned_data.get('first_name')
            last_name = form.cleaned_data.get('last_name')
            email = form.cleaned_data.get('email')
            
            # Asignar los campos adicionales al objeto usuario
            user.first_name = first_name
            user.last_name = last_name
            user.email = email

            # Guardar el objeto usuario en la base de datos
            user.save()

            # Autenticar al usuario y redirigir al usuario a la página de inicio
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=user.username, password=raw_password)
            login(request, user)
            return redirect('index')
    else:
        form = CustomUserCreationForm()
    return render(request, 'signup.html', {'form': form})




# CERRAR SESIÓN
def signout(request):
    logout(request)
    return redirect('loginView')



# INICIAR SESIÓN
def signin(request):
    if request.method == 'GET':
        return render(request, 'signin.html', {
            'form': AuthenticationForm
        })
    else:
        user = authenticate(
            request, username=request.POST['username'], password=request.POST['password'])

        if user is None:
            return render(request, 'signin.html', {
                'form': AuthenticationForm,
                'error': 'Usuario y/o contraseña incorrecto'
            })
        else:
            login(request, user)
            return redirect('index')

#Funciones pagina web#

>>>>>>> f87ea226a86b5bbc4109e973de3794c715e4984b
